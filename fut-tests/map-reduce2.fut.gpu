types {
  type "[]([]i64, i64, i64)" = opaque {
    [][]i64
    []i64
    []i64
  }
}



entry("main",
      {a: [][]i64},
      {*opaque "[]([]i64, i64, i64)"})
  entry_main (n_5334 : i64,
              m_5335 : i64,
              a_5336 : [n_5334][m_5335]i64)
  : {*[n_5334][m_5335]i64,
     *[n_5334]i64,
     *[n_5334]i64} = {
  let {defunc_0_map_res_5511 : [n_5334][m_5335]i64,
       defunc_0_map_res_5512 : [n_5334]i64,
       defunc_0_map_res_5513 : [n_5334]i64} =
    #[incremental_flattening(only_intra)]
    segmap(group; ; groups=n_5334; groupsize=m_5335)
    (gtid_5514 < n_5334) (~phys_group_id_5515) : {[m_5335]i64, i64, i64} {
      let {defunc_0_reduce_res_5518 : i64,
           defunc_0_reduce_res_5519 : i64,
           defunc_0_map_res_5520 : [m_5335]i64} =
        segred(thread; ; )
        (gtid_5521 < m_5335) (~phys_tid_5522)
        ({9223372036854775807i64, 0i64},
        ,
        \ {eta_p_5523 : i64,
           eta_p_5524 : i64,
           eta_p_5525 : i64,
           eta_p_5526 : i64}
          : {i64,
             i64} ->
          let {min_res_5527 : i64} =
            smin64(eta_p_5523, eta_p_5525)
          let {defunc_0_op_res_5528 : i64} =
            add64(eta_p_5524, eta_p_5526)
          in {min_res_5527, defunc_0_op_res_5528})
        : {i64, i64, i64} {
          let {eta_p_5529 : i64} =
            a_5336[gtid_5514, gtid_5521]
          let {lifted_lambda_res_5530 : i64} =
            mul64(2i64, eta_p_5529)
          let {lifted_lambda_res_5531 : i64} =
            add64(2i64, lifted_lambda_res_5530)
          return {returns lifted_lambda_res_5530,
                  returns lifted_lambda_res_5530,
                  returns lifted_lambda_res_5531}
        }
      return {returns defunc_0_map_res_5520,
              returns defunc_0_reduce_res_5519,
              returns defunc_0_reduce_res_5518}
    }
  in {defunc_0_map_res_5511, defunc_0_map_res_5512, defunc_0_map_res_5513}
}
